generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String         @id @default(cuid())
  username   String         @unique
  email      String         @unique
  password   String
  firstName  String
  lastName   String
  role       UserRole       @default(FARMER)
  isActive   Boolean        @default(true)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  alerts     Alert[]
  farms      FarmUser[]
  ponds      Pond[]
  sensorData SensorData[]
  activities UserActivity[]
  sessions   UserSession[]

  @@map("users")
}

model Farm {
  id        String     @id @default(cuid())
  name      String
  location  String
  region    String?
  manager   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     FarmUser[]
  ponds     Pond[]

  @@map("farms")
}

model FarmUser {
  id     String @id @default(cuid())
  userId String
  farmId String
  farm   Farm   @relation(fields: [farmId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, farmId])
  @@map("farm_users")
}

model Pond {
  id          String          @id @default(cuid())
  name        String
  farmId      String
  userId      String
  depth       Float?
  area        Float?
  volume      Float?
  fishSpecies String?
  temperature Float?
  ph          Float?
  oxygen      Float?
  turbidity   Float?
  status      PondStatus      @default(ACTIVE)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  alerts      Alert[]
  analytics   PondAnalytics[]
  farm        Farm            @relation(fields: [farmId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  sensorData  SensorData[]

  @@map("ponds")
}

model SensorData {
  id         String     @id @default(cuid())
  pondId     String
  userId     String
  sensorType SensorType
  value      Float
  unit       String
  timestamp  DateTime   @default(now())
  quality    String?
  deviceId   String?
  location   String?
  metadata   Json?
  pond       Pond       @relation(fields: [pondId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([timestamp])
  @@index([pondId, sensorType, timestamp])
  @@map("sensor_data")
}

model Alert {
  id         String        @id @default(cuid())
  pondId     String
  userId     String
  type       AlertType
  severity   AlertSeverity
  message    String
  isRead     Boolean       @default(false)
  isResolved Boolean       @default(false)
  resolvedAt DateTime?
  resolvedBy String?
  metadata   Json?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  pond       Pond          @relation(fields: [pondId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([pondId, isRead])
  @@index([userId, isRead])
  @@index([createdAt])
  @@map("alerts")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
  @@map("user_sessions")
}

model UserActivity {
  id         String       @id @default(cuid())
  userId     String
  action     ActivityType
  resource   String?
  resourceId String?
  metadata   Json?
  timestamp  DateTime     @default(now())
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([timestamp])
  @@map("user_activities")
}

model PondAnalytics {
  id             String   @id @default(cuid())
  pondId         String
  date           DateTime
  avgTemperature Float?
  avgPh          Float?
  avgOxygen      Float?
  avgTurbidity   Float?
  minTemperature Float?
  maxTemperature Float?
  minPh          Float?
  maxPh          Float?
  minOxygen      Float?
  maxOxygen      Float?
  dataPoints     Int      @default(0)
  alertsCount    Int      @default(0)
  criticalEvents Int      @default(0)
  pond           Pond     @relation(fields: [pondId], references: [id], onDelete: Cascade)

  @@unique([pondId, date])
  @@index([date])
  @@map("pond_analytics")
}

model SystemMetrics {
  id              String   @id @default(cuid())
  date            DateTime @unique
  totalUsers      Int      @default(0)
  activeUsers     Int      @default(0)
  totalPonds      Int      @default(0)
  activePonds     Int      @default(0)
  totalSensorData Int      @default(0)
  totalAlerts     Int      @default(0)
  criticalAlerts  Int      @default(0)
  systemHealth    String   @default("HEALTHY")

  @@index([date])
  @@map("system_metrics")
}

enum UserRole {
  ADMIN
  FARMER
  TECHNICIAN
  VIEWER
}

enum PondStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  CLOSED
}

enum SensorType {
  TEMPERATURE
  PH
  OXYGEN
  TURBIDITY
  DEPTH
  FLOW_RATE
  CONDUCTIVITY
  SALINITY
  NITRATE
  PHOSPHATE
  AMMONIA
}

enum AlertType {
  TEMPERATURE_HIGH
  TEMPERATURE_LOW
  PH_HIGH
  PH_LOW
  OXYGEN_LOW
  OXYGEN_HIGH
  TURBIDITY_HIGH
  SYSTEM_ERROR
  SENSOR_OFFLINE
  MAINTENANCE_DUE
  FEEDING_REMINDER
  WATER_CHANGE
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ActivityType {
  LOGIN
  LOGOUT
  POND_CREATED
  POND_UPDATED
  POND_DELETED
  SENSOR_DATA_ADDED
  ALERT_CREATED
  ALERT_RESOLVED
  SETTINGS_CHANGED
  REPORT_GENERATED
}
