{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mFailed to initialize services: accountSid must start with AC\u001b[39m","stack":"Error: accountSid must start with AC\n    at new Client (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\twilio\\lib\\base\\BaseTwilio.js:71:23)\n    at new Twilio (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\twilio\\lib\\rest\\Twilio.js:33:9)\n    at TwilioSDK (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\twilio\\lib\\index.js:40:12)\n    at AlertService.initialize (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:19:27)\n    at initializeServices (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\app.js:128:24)\n    at startServer (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\app.js:152:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-07-18 10:19:36:1936"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:21:15:2115"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:21:15:2115"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:21:21:2121"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:21:21:2121"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:21:26:2126"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:21:26:2126"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:21:31:2131"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:21:31:2131"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:21:36:2136"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:21:36:2136"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:21:41:2141"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:21:41:2141"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:21:46:2146"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:21:46:2146"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:21:51:2151"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:21:51:2151"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:21:56:2156"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:21:56:2156"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:22:01:221"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:22:01:221"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:22:06:226"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:22:06:226"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:22:11:2211"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:22:11:2211"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:22:16:2216"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:22:16:2216"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:22:21:2221"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:22:21:2221"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:22:26:2226"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:22:26:2226"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:22:31:2231"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:22:31:2231"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:22:36:2236"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:22:36:2236"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:22:41:2241"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:22:41:2241"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:22:46:2246"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:22:46:2246"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:22:51:2251"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:22:51:2251"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:22:56:2256"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:22:56:2256"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:23:01:231"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:23:01:231"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:23:06:236"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:23:06:236"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:23:11:2311"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:23:11:2311"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:23:16:2316"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:23:16:2316"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:23:21:2321"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:23:21:2321"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:23:26:2326"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:23:26:2326"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:23:31:2331"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:23:31:2331"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:23:36:2336"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:23:36:2336"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:23:41:2341"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:23:41:2341"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:23:46:2346"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:23:46:2346"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:23:51:2351"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:23:51:2351"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:23:56:2356"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:23:56:2356"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:24:01:241"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:24:01:241"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:24:06:246"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:24:06:246"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:24:11:2411"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:24:11:2411"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:24:16:2416"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:24:16:2416"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:24:21:2421"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:24:21:2421"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:24:27:2427"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:24:27:2427"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:24:31:2431"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:24:31:2431"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:24:36:2436"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:24:36:2436"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:24:41:2441"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:24:41:2441"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:24:46:2446"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:24:46:2446"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:24:51:2451"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:24:51:2451"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:24:56:2456"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:24:56:2456"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:25:01:251"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:25:01:251"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:25:06:256"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:25:06:256"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:25:11:2511"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:25:11:2511"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:25:16:2516"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:25:16:2516"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:25:21:2521"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:25:21:2521"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:25:26:2526"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:25:26:2526"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:25:31:2531"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:25:31:2531"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:25:36:2536"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:25:36:2536"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:25:41:2541"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:25:41:2541"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:25:46:2546"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:25:46:2546"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:25:51:2551"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:25:51:2551"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:25:56:2556"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:25:56:2556"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:26:01:261"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:26:01:261"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:26:06:266"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:26:06:266"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:26:11:2611"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:26:11:2611"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:26:16:2616"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:26:16:2616"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:26:21:2621"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:26:21:2621"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:26:26:2626"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:26:26:2626"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:26:31:2631"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:26:31:2631"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:26:36:2636"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:26:36:2636"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:26:41:2641"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:26:41:2641"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:26:46:2646"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:26:46:2646"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:26:51:2651"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:26:51:2651"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:26:56:2656"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:26:56:2656"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:27:01:271"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:27:01:271"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:27:06:276"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:27:06:276"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:27:11:2711"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:27:11:2711"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:27:16:2716"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:27:16:2716"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:27:21:2721"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:27:21:2721"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:27:26:2726"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:27:26:2726"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:27:31:2731"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:27:31:2731"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:27:36:2736"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:27:36:2736"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:27:41:2741"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:27:41:2741"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:27:46:2746"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:27:46:2746"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:27:51:2751"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:27:51:2751"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:27:56:2756"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:27:56:2756"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:28:01:281"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:28:01:281"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:28:06:286"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:28:06:286"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:28:11:2811"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:28:11:2811"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:28:16:2816"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:28:16:2816"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:28:21:2821"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:28:21:2821"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:28:26:2826"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:28:26:2826"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:28:31:2831"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:28:31:2831"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:28:36:2836"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:28:36:2836"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:28:41:2841"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:28:41:2841"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:28:46:2846"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:28:46:2846"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:28:51:2851"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:28:51:2851"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:28:56:2856"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:28:56:2856"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:29:01:291"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:29:01:291"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:29:06:296"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:29:06:296"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:29:11:2911"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:29:11:2911"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:29:16:2916"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:29:16:2916"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:29:21:2921"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:29:21:2921"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:29:26:2926"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:29:26:2926"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:29:31:2931"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:29:31:2931"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:29:36:2936"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:29:36:2936"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:29:42:2942"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:29:42:2942"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:29:46:2946"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:29:46:2946"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:29:52:2952"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:29:52:2952"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:29:56:2956"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:29:56:2956"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:30:02:302"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:30:02:302"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:30:06:306"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:30:06:306"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:30:11:3011"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:30:11:3011"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:30:17:3017"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:30:17:3017"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:30:21:3021"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:30:21:3021"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:30:27:3027"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:30:27:3027"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:30:32:3032"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:30:32:3032"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:30:37:3037"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:30:37:3037"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:30:41:3041"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:30:41:3041"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:36:16:3616"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:36:16:3616"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:36:22:3622"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:36:22:3622"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:36:27:3627"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:36:27:3627"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:36:32:3632"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:36:32:3632"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:36:37:3637"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:36:37:3637"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:36:42:3642"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:36:42:3642"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:36:47:3647"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:36:47:3647"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:36:52:3652"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:36:52:3652"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:36:57:3657"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:36:57:3657"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:37:02:372"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:37:02:372"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:37:07:377"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:37:07:377"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:37:12:3712"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:37:12:3712"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:37:17:3717"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:37:17:3717"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:37:22:3722"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:37:22:3722"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:37:27:3727"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:37:27:3727"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:37:32:3732"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:37:32:3732"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:37:37:3737"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:37:37:3737"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:37:42:3742"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:37:42:3742"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:37:47:3747"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:37:47:3747"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:37:52:3752"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:37:52:3752"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:37:57:3757"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:37:57:3757"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 10:38:01:381"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:38:02:382"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:38:02:382"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:38:07:387"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:38:07:387"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:38:12:3812"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:38:12:3812"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:38:17:3817"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:38:17:3817"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:38:22:3822"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:38:22:3822"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:38:27:3827"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:38:27:3827"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:38:32:3832"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:38:32:3832"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:38:37:3837"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:38:37:3837"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:38:42:3842"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:38:42:3842"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:38:47:3847"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:38:47:3847"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:38:52:3852"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:38:52:3852"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:38:57:3857"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:38:57:3857"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:39:02:392"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:39:02:392"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:39:07:397"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:39:07:397"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:39:12:3912"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:39:12:3912"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:39:17:3917"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:39:17:3917"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:39:22:3922"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:39:22:3922"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:39:27:3927"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:39:27:3927"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:39:32:3932"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:39:32:3932"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:39:37:3937"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:39:37:3937"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:39:42:3942"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:39:42:3942"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:39:47:3947"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:39:47:3947"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:39:52:3952"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:39:52:3952"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:39:57:3957"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:39:57:3957"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 10:40:00:400"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:40:02:402"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:40:02:402"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:40:07:407"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:40:07:407"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:40:12:4012"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:40:12:4012"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:40:17:4017"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:40:17:4017"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:40:22:4022"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:40:22:4022"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:40:27:4027"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:40:27:4027"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:40:32:4032"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:40:32:4032"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:40:37:4037"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:40:37:4037"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:40:42:4042"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:40:42:4042"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:40:47:4047"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:40:47:4047"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:40:52:4052"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:40:52:4052"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:40:57:4057"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:40:57:4057"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:41:02:412"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:41:02:412"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:41:07:417"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:41:07:417"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:41:12:4112"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:41:12:4112"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:41:18:4118"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:41:18:4118"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:41:22:4122"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:41:22:4122"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:41:28:4128"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:41:28:4128"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:41:33:4133"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:41:33:4133"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:41:37:4137"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:41:37:4137"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:41:43:4143"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:41:43:4143"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:41:47:4147"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:41:47:4147"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:41:52:4152"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:41:52:4152"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:41:58:4158"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:41:58:4158"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 10:42:00:420"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:42:03:423"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:42:03:423"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:42:08:428"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:42:08:428"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:42:13:4213"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:42:13:4213"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:42:18:4218"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:42:18:4218"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:42:23:4223"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:42:23:4223"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:42:28:4228"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:42:28:4228"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:42:33:4233"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:42:33:4233"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:42:38:4238"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:42:38:4238"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:42:43:4243"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:42:43:4243"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:42:48:4248"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:42:48:4248"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:42:53:4253"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:42:53:4253"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:42:58:4258"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:42:58:4258"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:43:03:433"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:43:03:433"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:43:08:438"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:43:08:438"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:43:13:4313"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:43:13:4313"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:43:18:4318"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:43:18:4318"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:43:23:4323"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:43:23:4323"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:43:28:4328"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:43:28:4328"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:43:33:4333"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:43:33:4333"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:43:38:4338"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:43:38:4338"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:43:43:4343"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:43:43:4343"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:43:48:4348"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:43:48:4348"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:43:53:4353"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:43:53:4353"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:43:58:4358"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:43:58:4358"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 10:44:01:441"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:44:03:443"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:44:03:443"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:44:08:448"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:44:08:448"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:44:14:4414"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:44:14:4414"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:44:19:4419"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:44:19:4419"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:44:24:4424"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:44:24:4424"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:44:29:4429"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:44:29:4429"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:44:34:4434"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:44:34:4434"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:44:39:4439"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:44:39:4439"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:44:44:4444"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:44:44:4444"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:44:49:4449"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:44:49:4449"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:44:54:4454"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:44:54:4454"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:44:59:4459"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:44:59:4459"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:45:04:454"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:45:04:454"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:45:09:459"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:45:09:459"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:45:14:4514"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:45:14:4514"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:45:19:4519"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:45:19:4519"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:45:24:4524"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:45:24:4524"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:45:29:4529"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:45:29:4529"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:45:34:4534"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:45:34:4534"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:45:39:4539"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:45:39:4539"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:45:44:4544"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:45:44:4544"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:45:49:4549"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:45:49:4549"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:45:54:4554"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:45:54:4554"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:45:59:4559"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:45:59:4559"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 10:46:00:460"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:46:04:464"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:46:04:464"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:46:09:469"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:46:09:469"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:46:14:4614"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:46:14:4614"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:46:19:4619"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:46:19:4619"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:46:24:4624"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:46:24:4624"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:46:29:4629"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:46:29:4629"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:46:34:4634"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:46:34:4634"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:46:39:4639"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:46:39:4639"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:46:44:4644"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:46:44:4644"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:46:49:4649"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:46:49:4649"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:46:54:4654"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:46:54:4654"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:46:59:4659"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:46:59:4659"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:47:04:474"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:47:04:474"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:47:09:479"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:47:09:479"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:47:14:4714"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:47:14:4714"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:47:19:4719"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:47:19:4719"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:47:24:4724"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:47:24:4724"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:47:29:4729"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:47:29:4729"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:47:34:4734"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:47:34:4734"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:47:39:4739"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:47:39:4739"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:47:44:4744"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:47:44:4744"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:47:49:4749"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:47:49:4749"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:47:54:4754"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:47:54:4754"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:47:59:4759"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:47:59:4759"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 10:48:00:480"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:48:04:484"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:48:04:484"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:48:09:489"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:48:09:489"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:48:14:4814"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:48:14:4814"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:48:19:4819"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:48:19:4819"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:48:24:4824"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:48:24:4824"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:48:29:4829"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:48:29:4829"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:48:34:4834"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:48:34:4834"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:48:39:4839"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:48:39:4839"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:48:44:4844"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:48:45:4845"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:48:49:4849"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:48:49:4849"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:48:54:4854"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:48:54:4854"}
{"error":"relation \"ponds\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:48:59:4859"}
{"code":"42P01","file":"parse_relation.c","length":105,"level":"\u001b[31merror\u001b[39m","line":"1449","message":"\u001b[31mGenerate sensor data error: relation \"ponds\" does not exist\u001b[39m","name":"error","position":"413","routine":"parserOpenTable","severity":"ERROR","stack":"error: relation \"ponds\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:48:59:4859"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:49:04:494"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:49:04:494"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:49:09:499"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:49:09:499"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:49:14:4914"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:49:14:4914"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:49:19:4919"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:49:19:4919"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:49:24:4924"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:49:24:4924"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:49:30:4930"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:49:30:4930"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:49:34:4934"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:49:34:4934"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:49:39:4939"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:49:39:4939"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:49:44:4944"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:49:44:4944"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:49:50:4950"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:49:50:4950"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:49:55:4955"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:49:55:4955"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:50:00:500"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:50:00:500"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 10:50:01:501"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:50:05:505"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:50:05:505"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:50:09:509"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:50:09:509"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:50:15:5015"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:50:15:5015"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:50:20:5020"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:50:20:5020"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:50:25:5025"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:50:25:5025"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:50:30:5030"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:50:30:5030"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:50:35:5035"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:50:35:5035"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:50:40:5040"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:50:40:5040"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:50:45:5045"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:50:45:5045"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:50:50:5050"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:50:50:5050"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:50:55:5055"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:50:55:5055"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:51:00:510"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:51:00:510"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:51:05:515"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:51:05:515"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:51:10:5110"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:51:10:5110"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:51:15:5115"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:51:15:5115"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:51:20:5120"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:51:20:5120"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:51:25:5125"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:51:25:5125"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:51:30:5130"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:51:30:5130"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:51:35:5135"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:51:35:5135"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:51:40:5140"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:51:40:5140"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:51:45:5145"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:51:45:5145"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:51:50:5150"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:51:50:5150"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:51:55:5155"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:51:55:5155"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:52:00:520"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:52:00:520"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 10:52:00:520"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:52:05:525"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:52:05:525"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:52:10:5210"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:52:10:5210"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:52:15:5215"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:52:15:5215"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:52:20:5220"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:52:20:5220"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:52:25:5225"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:52:25:5225"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:52:30:5230"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:52:30:5230"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:52:35:5235"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:52:35:5235"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:52:40:5240"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:52:40:5240"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:52:45:5245"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:52:45:5245"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:52:50:5250"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:52:50:5250"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:52:55:5255"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:52:55:5255"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:53:00:530"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:53:00:530"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:53:05:535"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:53:05:535"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:53:10:5310"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:53:10:5310"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:53:15:5315"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:53:15:5315"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:53:20:5320"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:53:20:5320"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:53:25:5325"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:53:25:5325"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:53:30:5330"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:53:30:5330"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:53:35:5335"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:53:35:5335"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:53:40:5340"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:53:40:5340"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:53:45:5345"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:53:45:5345"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:53:50:5350"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:53:50:5350"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:53:55:5355"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:53:55:5355"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:53:56:5356"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:53:56:5356"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:00:540"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:00:540"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 10:54:00:540"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 10:54:01:541"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:02:542"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:02:542"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:05:545"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:05:545"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:07:547"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:07:547"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:10:5410"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:10:5410"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:12:5412"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:12:5412"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:17:5417"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:17:5417"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:22:5422"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:22:5422"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:27:5427"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:27:5427"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:32:5432"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:32:5432"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:32:5432"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:32:5432"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:37:5437"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:37:5437"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:38:5438"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:38:5438"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:42:5442"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:42:5442"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:43:5443"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:43:5443"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:47:5447"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:47:5447"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:48:5448"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:48:5448"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:52:5452"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:52:5452"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:53:5453"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:53:5453"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:57:5457"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:57:5457"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:54:58:5458"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:54:58:5458"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:02:552"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:02:552"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:03:553"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:03:553"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:07:557"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:07:557"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:08:558"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:08:558"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:12:5512"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:12:5512"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:13:5513"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:13:5513"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:17:5517"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:17:5517"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:18:5518"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:18:5518"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:22:5522"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:22:5522"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:23:5523"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:23:5523"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:27:5527"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:27:5527"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:28:5528"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:28:5528"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:32:5532"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:32:5532"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:33:5533"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:33:5533"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:37:5537"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:37:5537"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:38:5538"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:39:5539"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:42:5542"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:42:5542"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:43:5543"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:43:5543"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:47:5547"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:47:5547"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:48:5548"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:48:5548"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:52:5552"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:52:5552"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:53:5553"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:53:5553"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:57:5557"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:57:5557"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:55:58:5558"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:55:58:5558"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 10:56:00:560"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 10:56:01:561"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:56:02:562"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:56:02:562"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mLogin error: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    email: \"admin@aquaculture.dz\"\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    preferences: true,\u001b[39m\n\u001b[31m    ~~~~~~~~~~~\u001b[39m\n\u001b[31m?   farms?: true,\u001b[39m\n\u001b[31m?   ponds?: true,\u001b[39m\n\u001b[31m?   sensorData?: true,\u001b[39m\n\u001b[31m?   alerts?: true,\u001b[39m\n\u001b[31m?   sessions?: true,\u001b[39m\n\u001b[31m?   activities?: true\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown field `preferences` for include statement on model `User`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation:\n\n{\n  where: {\n    email: \"admin@aquaculture.dz\"\n  },\n  include: {\n    preferences: true,\n    ~~~~~~~~~~~\n?   farms?: true,\n?   ponds?: true,\n?   sensorData?: true,\n?   alerts?: true,\n?   sessions?: true,\n?   activities?: true\n  }\n}\n\nUnknown field `preferences` for include statement on model `User`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\routes\\auth.js:168:18","timestamp":"2025-07-18 10:56:02:562"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:56:03:563"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:56:03:563"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:56:07:567"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:56:07:567"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:56:08:568"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:56:08:568"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:56:12:5612"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:56:12:5612"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:56:13:5613"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:56:13:5613"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:56:17:5617"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:56:17:5617"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:56:19:5619"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:56:19:5619"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:56:22:5622"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:56:22:5622"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:56:24:5624"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:56:24:5624"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:56:27:5627"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:56:27:5627"}
{"error":"column \"pond_id\" does not exist","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mDatabase query error:\u001b[39m","query":"\n        SELECT \n          p.id, p.name, p.type, p.farm_id,\n          sd.temperature as last_temperature,\n          sd.ph_level as last_ph,\n          sd.dissolved_oxygen as last_oxygen,\n          sd.salinity as last_salinity,\n          sd.turbidity as last_turbidity,\n          sd.ammonia_level as last_ammonia,\n          sd.nitrite_level as last_nitrite,\n          sd.nitrate_level as last_nitrate\n        FROM ponds p\n        LEFT JOIN LATERAL (\n          SELECT * FROM sensor_data \n          WHERE pond_id = p.id \n          ORDER BY created_at DESC \n          LIMIT 1\n        ) sd ON true\n        WHERE p.is_active = true\n      ","timestamp":"2025-07-18 10:56:29:5629"}
{"code":"42703","file":"parse_relation.c","hint":"Perhaps you meant to reference the column \"sensor_data.pondId\".","length":173,"level":"\u001b[31merror\u001b[39m","line":"3723","message":"\u001b[31mGenerate sensor data error: column \"pond_id\" does not exist\u001b[39m","name":"error","position":"502","routine":"errorMissingColumn","severity":"ERROR","stack":"error: column \"pond_id\" does not exist\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async query (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\database\\connection.js:64:20)\n    at async DataSimulator.generateSensorData (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:44:27)\n    at async Timeout._onTimeout (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\dataSimulator.js:22:9)","timestamp":"2025-07-18 10:56:29:5629"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mFailed to initialize services: dataSimulator.start is not a function\u001b[39m","stack":"TypeError: dataSimulator.start is not a function\n    at initializeServices (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\app.js:132:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async startServer (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\app.js:152:5)","timestamp":"2025-07-18 11:14:16:1416"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 11:16:02:162"}
{"body":"{\" username\\:\\testuser\\,\\email\\:\\test@example.com\\,\\password\\:\\password123\\,\\firstName\\:\\Test\\,\\lastName\\:\\User\\,\\role\\:\\FARMER\\}","expose":true,"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mBad escaped character in JSON at position 12\u001b[39m","stack":"SyntaxError: Bad escaped character in JSON at position 12\n    at JSON.parse (<anonymous>)\n    at parse (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\body-parser\\lib\\types\\json.js:92:19)\n    at C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\body-parser\\lib\\read.js:128:18\n    at AsyncResource.runInAsyncScope (node:async_hooks:206:9)\n    at invokeCallback (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\raw-body\\index.js:238:16)\n    at done (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\raw-body\\index.js:227:7)\n    at IncomingMessage.onEnd (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\raw-body\\index.js:287:7)\n    at IncomingMessage.emit (node:events:518:28)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)","status":400,"statusCode":400,"timestamp":"2025-07-18 12:03:36:336","type":"entity.parse.failed"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 12:04:01:41"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 12:04:01:41"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 12:06:00:60"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 12:06:00:60"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 12:08:00:80"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 12:08:00:80"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 12:10:01:101"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 12:10:01:101"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 12:12:00:120"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 12:12:00:120"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mLogin error: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    email: \"admin@aquaculture.dz\"\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    preferences: true,\u001b[39m\n\u001b[31m    ~~~~~~~~~~~\u001b[39m\n\u001b[31m?   farms?: true,\u001b[39m\n\u001b[31m?   ponds?: true,\u001b[39m\n\u001b[31m?   sensorData?: true,\u001b[39m\n\u001b[31m?   alerts?: true,\u001b[39m\n\u001b[31m?   sessions?: true,\u001b[39m\n\u001b[31m?   activities?: true\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown field `preferences` for include statement on model `User`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation:\n\n{\n  where: {\n    email: \"admin@aquaculture.dz\"\n  },\n  include: {\n    preferences: true,\n    ~~~~~~~~~~~\n?   farms?: true,\n?   ponds?: true,\n?   sensorData?: true,\n?   alerts?: true,\n?   sessions?: true,\n?   activities?: true\n  }\n}\n\nUnknown field `preferences` for include statement on model `User`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\routes\\auth.js:168:18","timestamp":"2025-07-18 12:12:56:1256"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mLogin error: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    email: \"admin@aquaculture.dz\"\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    preferences: true,\u001b[39m\n\u001b[31m    ~~~~~~~~~~~\u001b[39m\n\u001b[31m?   farms?: true,\u001b[39m\n\u001b[31m?   ponds?: true,\u001b[39m\n\u001b[31m?   sensorData?: true,\u001b[39m\n\u001b[31m?   alerts?: true,\u001b[39m\n\u001b[31m?   sessions?: true,\u001b[39m\n\u001b[31m?   activities?: true\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown field `preferences` for include statement on model `User`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation:\n\n{\n  where: {\n    email: \"admin@aquaculture.dz\"\n  },\n  include: {\n    preferences: true,\n    ~~~~~~~~~~~\n?   farms?: true,\n?   ponds?: true,\n?   sensorData?: true,\n?   alerts?: true,\n?   sessions?: true,\n?   activities?: true\n  }\n}\n\nUnknown field `preferences` for include statement on model `User`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\routes\\auth.js:168:18","timestamp":"2025-07-18 12:12:58:1258"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mLogin error: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    email: \"admin@aquaculture.dz\"\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    preferences: true,\u001b[39m\n\u001b[31m    ~~~~~~~~~~~\u001b[39m\n\u001b[31m?   farms?: true,\u001b[39m\n\u001b[31m?   ponds?: true,\u001b[39m\n\u001b[31m?   sensorData?: true,\u001b[39m\n\u001b[31m?   alerts?: true,\u001b[39m\n\u001b[31m?   sessions?: true,\u001b[39m\n\u001b[31m?   activities?: true\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown field `preferences` for include statement on model `User`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation:\n\n{\n  where: {\n    email: \"admin@aquaculture.dz\"\n  },\n  include: {\n    preferences: true,\n    ~~~~~~~~~~~\n?   farms?: true,\n?   ponds?: true,\n?   sensorData?: true,\n?   alerts?: true,\n?   sessions?: true,\n?   activities?: true\n  }\n}\n\nUnknown field `preferences` for include statement on model `User`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\routes\\auth.js:168:18","timestamp":"2025-07-18 12:13:28:1328"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 12:14:00:140"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 12:14:00:140"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 12:16:01:161"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mThreshold checking error: \u001b[39m\n\u001b[31mInvalid `prisma.pond.findMany()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    isActive: true,\u001b[39m\n\u001b[31m    ~~~~~~~~\u001b[39m\n\u001b[31m?   AND?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   OR?: PondWhereInput[],\u001b[39m\n\u001b[31m?   NOT?: PondWhereInput | PondWhereInput[],\u001b[39m\n\u001b[31m?   id?: StringFilter | String,\u001b[39m\n\u001b[31m?   name?: StringFilter | String,\u001b[39m\n\u001b[31m?   farmId?: StringFilter | String,\u001b[39m\n\u001b[31m?   userId?: StringFilter | String,\u001b[39m\n\u001b[31m?   depth?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   area?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   volume?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   fishSpecies?: StringNullableFilter | String | Null,\u001b[39m\n\u001b[31m?   temperature?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   ph?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   oxygen?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   turbidity?: FloatNullableFilter | Float | Null,\u001b[39m\n\u001b[31m?   status?: EnumPondStatusFilter | PondStatus,\u001b[39m\n\u001b[31m?   createdAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   updatedAt?: DateTimeFilter | DateTime,\u001b[39m\n\u001b[31m?   farm?: FarmRelationFilter | FarmWhereInput,\u001b[39m\n\u001b[31m?   user?: UserRelationFilter | UserWhereInput,\u001b[39m\n\u001b[31m?   sensorData?: SensorDataListRelationFilter,\u001b[39m\n\u001b[31m?   alerts?: AlertListRelationFilter,\u001b[39m\n\u001b[31m?   analytics?: PondAnalyticsListRelationFilter\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    thresholds: {\u001b[39m\n\u001b[31m      where: {\u001b[39m\n\u001b[31m        isActive: true\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    sensorData: {\u001b[39m\n\u001b[31m      orderBy: {\u001b[39m\n\u001b[31m        timestamp: \"desc\"\u001b[39m\n\u001b[31m      },\u001b[39m\n\u001b[31m      take: 1\u001b[39m\n\u001b[31m    },\u001b[39m\n\u001b[31m    farm: {\u001b[39m\n\u001b[31m      include: {\u001b[39m\n\u001b[31m        users: {\u001b[39m\n\u001b[31m          include: {\u001b[39m\n\u001b[31m            user: {\u001b[39m\n\u001b[31m              include: {\u001b[39m\n\u001b[31m                preferences: true\u001b[39m\n\u001b[31m              }\u001b[39m\n\u001b[31m            }\u001b[39m\n\u001b[31m          }\u001b[39m\n\u001b[31m        }\u001b[39m\n\u001b[31m      }\u001b[39m\n\u001b[31m    }\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown argument `isActive`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.pond.findMany()` invocation:\n\n{\n  where: {\n    isActive: true,\n    ~~~~~~~~\n?   AND?: PondWhereInput | PondWhereInput[],\n?   OR?: PondWhereInput[],\n?   NOT?: PondWhereInput | PondWhereInput[],\n?   id?: StringFilter | String,\n?   name?: StringFilter | String,\n?   farmId?: StringFilter | String,\n?   userId?: StringFilter | String,\n?   depth?: FloatNullableFilter | Float | Null,\n?   area?: FloatNullableFilter | Float | Null,\n?   volume?: FloatNullableFilter | Float | Null,\n?   fishSpecies?: StringNullableFilter | String | Null,\n?   temperature?: FloatNullableFilter | Float | Null,\n?   ph?: FloatNullableFilter | Float | Null,\n?   oxygen?: FloatNullableFilter | Float | Null,\n?   turbidity?: FloatNullableFilter | Float | Null,\n?   status?: EnumPondStatusFilter | PondStatus,\n?   createdAt?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   farm?: FarmRelationFilter | FarmWhereInput,\n?   user?: UserRelationFilter | UserWhereInput,\n?   sensorData?: SensorDataListRelationFilter,\n?   alerts?: AlertListRelationFilter,\n?   analytics?: PondAnalyticsListRelationFilter\n  },\n  include: {\n    thresholds: {\n      where: {\n        isActive: true\n      }\n    },\n    sensorData: {\n      orderBy: {\n        timestamp: \"desc\"\n      },\n      take: 1\n    },\n    farm: {\n      include: {\n        users: {\n          include: {\n            user: {\n              include: {\n                preferences: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nUnknown argument `isActive`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async AlertService.checkThresholds (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:59:21)\n    at async Task._execution (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\services\\alertService.js:36:9)","timestamp":"2025-07-18 12:16:01:161"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mFailed to initialize services: alertService.initialize is not a function\u001b[39m","stack":"TypeError: alertService.initialize is not a function\n    at initializeServices (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\app.js:131:24)\n    at startServer (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\app.js:155:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-07-18 12:16:53:1653"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mLogin error: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    email: \"admin@aquaculture.dz\"\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    preferences: true,\u001b[39m\n\u001b[31m    ~~~~~~~~~~~\u001b[39m\n\u001b[31m?   farms?: true,\u001b[39m\n\u001b[31m?   ponds?: true,\u001b[39m\n\u001b[31m?   sensorData?: true,\u001b[39m\n\u001b[31m?   alerts?: true,\u001b[39m\n\u001b[31m?   sessions?: true,\u001b[39m\n\u001b[31m?   activities?: true\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown field `preferences` for include statement on model `User`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation:\n\n{\n  where: {\n    email: \"admin@aquaculture.dz\"\n  },\n  include: {\n    preferences: true,\n    ~~~~~~~~~~~\n?   farms?: true,\n?   ponds?: true,\n?   sensorData?: true,\n?   alerts?: true,\n?   sessions?: true,\n?   activities?: true\n  }\n}\n\nUnknown field `preferences` for include statement on model `User`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\routes\\auth.js:168:18","timestamp":"2025-07-18 14:17:09:179"}
{"clientVersion":"5.22.0","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mLogin error: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation:\u001b[39m\n\n\u001b[31m{\u001b[39m\n\u001b[31m  where: {\u001b[39m\n\u001b[31m    email: \"admin@aquaculture.dz\"\u001b[39m\n\u001b[31m  },\u001b[39m\n\u001b[31m  include: {\u001b[39m\n\u001b[31m    preferences: true,\u001b[39m\n\u001b[31m    ~~~~~~~~~~~\u001b[39m\n\u001b[31m?   farms?: true,\u001b[39m\n\u001b[31m?   ponds?: true,\u001b[39m\n\u001b[31m?   sensorData?: true,\u001b[39m\n\u001b[31m?   alerts?: true,\u001b[39m\n\u001b[31m?   sessions?: true,\u001b[39m\n\u001b[31m?   activities?: true\u001b[39m\n\u001b[31m  }\u001b[39m\n\u001b[31m}\u001b[39m\n\n\u001b[31mUnknown field `preferences` for include statement on model `User`. Available options are marked with ?.\u001b[39m","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation:\n\n{\n  where: {\n    email: \"admin@aquaculture.dz\"\n  },\n  include: {\n    preferences: true,\n    ~~~~~~~~~~~\n?   farms?: true,\n?   ponds?: true,\n?   sensorData?: true,\n?   alerts?: true,\n?   sessions?: true,\n?   activities?: true\n  }\n}\n\nUnknown field `preferences` for include statement on model `User`. Available options are marked with ?.\n    at wn (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at $n.handleRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6958)\n    at $n.handleAndLogRequestError (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6623)\n    at $n.request (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6307)\n    at async l (C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9633)\n    at async C:\\Users\\shifttech\\Desktop\\junctionxalgeria\\backend\\src\\routes\\auth.js:168:18","timestamp":"2025-07-18 14:45:31:4531"}
