// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(cuid())
    username  String   @unique
    email     String   @unique
    password  String
    firstName String
    lastName  String
    role      UserRole @default(FARMER)
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    farms        FarmUser[]
    alerts       Alert[]
    preferences  UserPreference[]
    activityLogs ActivityLog[]

    @@map("users")
}

model Farm {
    id          String   @id @default(cuid())
    name        String
    location    String
    description String?
    coordinates Json? // {lat: number, lng: number}
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    ponds  Pond[]
    users  FarmUser[]
    alerts Alert[]

    @@map("farms")
}

model FarmUser {
    id     String @id @default(cuid())
    userId String
    farmId String
    role   String @default("member") // owner, manager, member

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)

    @@unique([userId, farmId])
    @@map("farm_users")
}

model Pond {
    id          String   @id @default(cuid())
    farmId      String
    name        String
    type        String // freshwater, saltwater, brackish
    volume      Float? // in cubic meters
    depth       Float? // in meters
    temperature Float? // current temperature
    ph          Float? // current pH
    oxygen      Float? // current dissolved oxygen
    salinity    Float? // current salinity
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    farm       Farm         @relation(fields: [farmId], references: [id], onDelete: Cascade)
    sensorData SensorData[]
    alerts     Alert[]
    thresholds Threshold[]

    @@map("ponds")
}

model SensorData {
    id          String   @id @default(cuid())
    pondId      String
    temperature Float
    ph          Float
    oxygen      Float // dissolved oxygen in mg/L
    salinity    Float
    turbidity   Float? // water clarity
    ammonia     Float? // ammonia levels
    nitrite     Float? // nitrite levels
    nitrate     Float? // nitrate levels
    timestamp   DateTime @default(now())

    // Relations
    pond Pond @relation(fields: [pondId], references: [id], onDelete: Cascade)

    @@index([pondId, timestamp])
    @@map("sensor_data")
}

model Threshold {
    id          String    @id @default(cuid())
    pondId      String
    parameter   Parameter
    minValue    Float?
    maxValue    Float?
    criticalMin Float?
    criticalMax Float?
    isActive    Boolean   @default(true)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // Relations
    pond Pond @relation(fields: [pondId], references: [id], onDelete: Cascade)

    @@unique([pondId, parameter])
    @@map("thresholds")
}

model Alert {
    id         String     @id @default(cuid())
    pondId     String
    farmId     String
    userId     String?
    type       AlertType
    severity   Severity
    parameter  Parameter?
    value      Float?
    threshold  Float?
    message    String
    isRead     Boolean    @default(false)
    isResolved Boolean    @default(false)
    resolvedAt DateTime?
    createdAt  DateTime   @default(now())

    // Relations
    pond Pond  @relation(fields: [pondId], references: [id], onDelete: Cascade)
    farm Farm  @relation(fields: [farmId], references: [id], onDelete: Cascade)
    user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@index([pondId, createdAt])
    @@index([farmId, isResolved])
    @@map("alerts")
}

model UserPreference {
    id                String  @id @default(cuid())
    userId            String
    emailAlerts       Boolean @default(true)
    smsAlerts         Boolean @default(false)
    pushNotifications Boolean @default(true)
    alertSeverity     String  @default("medium") // low, medium, high, critical
    language          String  @default("en") // en, fr, ar
    timezone          String  @default("Africa/Algiers")

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
    @@map("user_preferences")
}

model ActivityLog {
    id        String   @id @default(cuid())
    userId    String?
    action    String // login, logout, create_pond, update_threshold, etc.
    entity    String? // pond, alert, threshold
    entityId  String?
    details   Json?
    ipAddress String?
    userAgent String?
    timestamp DateTime @default(now())

    // Relations
    user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@index([userId, timestamp])
    @@index([action, timestamp])
    @@map("activity_logs")
}

// Enums
enum UserRole {
    ADMIN
    FARMER
    TECHNICIAN
    VIEWER
}

enum AlertType {
    THRESHOLD_EXCEEDED
    SENSOR_MALFUNCTION
    SYSTEM_ERROR
    MAINTENANCE_DUE
    FISH_HEALTH
    WATER_QUALITY
}

enum Severity {
    LOW
    MEDIUM
    HIGH
    CRITICAL
}

enum Parameter {
    TEMPERATURE
    PH
    OXYGEN
    SALINITY
    TURBIDITY
    AMMONIA
    NITRITE
    NITRATE
}
